核心术语：
pod：k8s集群中运行部署应用的最小单元，支持多容器，支持多个容器在一个Pod中共享网络地址和文件系统
可以通过进程间通信或者文件共享的方式组合完成服务
pod具有不同的组织形式，有不同的控制器控制，可以分为Deployment、Job、Daemonset、StatefulSet
副本控制器：RC，是K8s集群中保证pod高可用的api对象，通过监控运行中的pod来保证集群中来保证集群中运行指定
数目的pod副本，少于指定数目，RC就会启动运行新的副本，多于指定数目，RC就会杀死多余的副本，
即使指定pod数目为1的情况，通过RC运行pod也比直接运行pod明智，因为RC可以发挥高可用的能力，永远保证只有一个pod在运行
副本集：RS，新一代的RC，提供同样的高可用能力，能支持更多种类的匹配模式，RS一般不单独使用，作为Deployment的理想状态参数使用

Deployment：部署，Deployment表示用户对K8s集群的一次更新操作，是一个比RS应用模式更广的API对象，可以创建一个新的服务，更新一个服务
也可以滚动升级一个服务。滚动升级一个服务实际是创建一个新的RS，然后逐渐将RS中的副本数目增加到理想状态，将旧的RS中的副本数目减少到0的
复合操作，这样一个复合操作采用Deployment来描述

服务Service：RC、RS、Deployment只保证了pod数量，但是没有解决访问这些服务的问题，一个pod只是运行服务的实例，随时可能在一个节点上停止
在另一个节点以一个新的IP启动一个新的pod，因此不能以确定的IP和端口号提供服务，要提供稳定的服务需要服务发现和负载均衡能力，每个service
会对应一个集群内有效地虚拟IP，集群内部通过虚拟IP访问一个服务，k8s集群中微服务的负载均衡是由kube-proxy实现的。kube-proxy是k8s集群内部的
负载均衡器，k8s的每个节点都有一个

JOB: job是k8s用来控制批处理型任务的API对象，批处理业务的运行有头有尾，长期业务在用户不停止的情况下永远运行，job管理的pod根据用户的
设置，任务完成后就自动退出。成功完成的标志根据不同的spec.completions策略而不同：单pod型任务有一个pod成功就标志完成，定数
成功型任务保证有N个任务全部成功


DaemonSet：长期运行型和批处理型服务的核心在业务应用，可能有些节点运行多个同类业务的Pod，有些节点上又没有这类pod运行，
而daemonSet类型的服务的关注点在k8s集群中的节点，保证每个节点上都有一个此类型的pod运行，节点可能是所有集群节点也可能是通过nodeSelector
选定的一些特定节点

StatefulSet：有状态服务集，RS主要是控制提供无状态服务的，其所控制的pod名字是随机设置的，一个pod出故障了就丢弃掉了，在另一个地方
重启一个新的pod，名字变了，名字和启动在哪不重要，重要的是pod数
而StatefulSet是用来控制有状态服务的，StatefulSet中每个pod的名字都是事先确定的，不能更改。对于RS中的pod，一般不挂载存储或者只挂载
共享存储，保存的是所有pod共享的状态，对于StatefulSet中的pod，每个pod挂载有自己独立的存储，如果一个pod出现故障，从其他节点启动一个同样
名字的pod，要挂载上原来pod的存储继续以他的状态提供服务，使用StatefulSet，pod任然可以通过漂移到不同节点提供HA，而存储可以通过外挂来提高可靠性
StatefulSet做的只是将确定的pod和确定的存储关联起来保证状态的连续性












