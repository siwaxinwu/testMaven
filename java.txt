String的特点是什么，他有哪些重要得方法
    indexOf()：查询字符串首次出现的下标位置
    lastIndexOf()：查询字符串最后出现的下标位置
    contains()：查询字符串中是否包含另一个字符串
    toLowerCase()：把字符串全部转换成小写
    toUpperCase()：把字符串全部转换成大写
    length()：查询字符串的长度
    trim()：去掉字符串首尾空格
    replace()：替换字符串中的某些字符
    split()：把字符串分割并返回字符串数组
    join()：把字符串数组转为字符串

HashMap 底层实现原理是什么？JDK8 做了哪些优化？
    jdk1.7使用的是动态数组和链表的数据结构,而jdk1.8用的是动态数组和链表\红黑树,
    当链表长度大于8且数组容量大于64的时候,链表转化为红黑树
    jdk1.8是通过key.hash & oldCapacity 确定元素是否需要移动，得到结果高一位为1就移动，
    位置变化为oldCapacity + 原位置
    jdk1.7链表插入方式为首部倒序插入，会造成死循环，jdk1.8为尾部正序插入
    1.7table 在创建 hashmap 时分配空间，而 1.8 在 put 的时候分配，如果 table 为空，则为 table 分配空间；

加载因子为什么是 0.75 而不是 0.5 或者 1.0 呢？
    容量和性能平衡的结果，取了0.5和1之间的数0.75
    负载因子过大，扩容的频率降低，空间利用率提高，但是hash冲突的概率增大，反而浪费性能
    负载因子过小，扩容频率增大，空间利用率下降，但hash冲突的概率减小，性能提升

HashMap原码的三个重要方法
    查询、新增、数据扩容


