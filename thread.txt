ReentrantLock 和 synchronized 的实现原理是什么？它们有什么区别？
实现原理：
    synchronized：独占式悲观锁，通过JVM隐式实现，java中每个对象都隐式包含一个monitor对象
    加锁的过程就是竞争monitor对象的过程
    当线程执行字节码指令monitorenter之后，将持有monitor对象，
    执行monitorexit指令后，释放monitor对象
    ReentrantLock实现了lock接口，是基于AQS实现的，默认非公平锁（抽象队列同步器）
    内部有一个state字段，为1表示锁被占用
区别：
    一个是jvm隐式实现，一个是java提供的API
    ReentrantLock可以设置成公平锁，但是Synchronized不行
    前者只能修饰代码块，后者还可以修饰方法
    前者需要手动加锁释放锁，不释放就会导致资源一直被占用，而后者不需要手动释放
    前者可以知道是否成功获取锁，后者不行

ReentrantLock的具体实现细节
    compareAndSetState（）尝试去吧state修改为1，acquire（1）尝试获取锁，获取失败就加入到阻塞队列
    释放锁过程：
    先调用tryRelease方法尝试释放锁
    释放成功，查看头节点的状态是否为Signal，如果是，则唤醒头结点的下个节点关联的线程，
    如果释放锁失败，返回false
    插队含义：指线程发送请求的同时该锁的状态恰好变成了可用，那么此线程可以跳过队列中正在排队的线程
    直接或取到锁

jdk1.6时锁做了哪些优化
    实现了自适应自旋锁、锁升级，自适应自旋锁自旋的时间不再是固定的
    锁升级就是从无锁、偏向锁、轻量级锁、重量级锁升级膨胀的过程
    偏向锁：无竞争的情况下设置的一种锁状态，会偏向于第一个获取他的线程，
    对象头内部标识为01表示为偏向锁的模式，偏向锁可以提高带有同步功能但无竞争的程序性能
    轻量级锁：jdk1.6之前synchronized是通过操作系统的互斥量（mutex lock）来实现的，
    需要在用户态和核心态之间做转换，性能低，称为重量级锁。轻量级锁是通过CAS机制来实现，
    他对比的是线程和对象的对象头中的mark word，更新成功则当前线程成功获取此锁，如果失败jvm先检查
    mark word是否指向当前线程的栈帧，如果是，则当前线程已经成功获取此锁，否则被其他线程占用


谈谈你对锁的理解？如何手动模拟一个死锁？
死锁：两个线程同时占有对方需要的资源，又在彼此等待对方释放资源，没有外力介入

什么是乐观锁和悲观锁，他们的应用有哪些 ，乐观锁有哪些问题
    lock锁是乐观锁的典型实现案列，ABA问题，添加版本号
    jdk1.5提供了AtomicStampedReference类解决ABA的问题，此类维护了一个版本号Stamp

什么是可重入锁，用代码如何实现，他的实现原理
    递归锁，指同一个线程，被调用的函数可以获取外层函数的锁，ReentrantLock和syncronized都是可重入锁
    可重入锁的实现原理，是在锁内部存储了一个线程标识，用于判断当前的锁属于哪个线程，
    并且锁的内部维护了一个计数器，当锁空闲时此计数器的值为0，当被线程占用和重入时分别加1，
    当锁被释放时计数器减1，直到减到 0 时表示此锁为空闲状态。
